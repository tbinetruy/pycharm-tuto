#+TITLE: PyCharm / Git

* Introduction

This document provides an introduction to using PyCharm Community Edition, which is free, along with its Git integration. We will create a small command line utility in python that will:

1. Return the current time when the user enter ~time~;
2. Returns vector dot product when user enters two vectors, for example when he enters ~got-product [1, 2, 3] [4, 5, 6]~.

We'll need to parse our user's input, and decide whether to call the python ~time~ function, which will require an ~import datetime~, or the ~numpy.dot~ method.

* Getting accustomed to PyCharm and Git
** Setting up the project

1. [[https://www.jetbrains.com/pycharm/download/#section=linux][Download]] PyCharm Community Edition for your platform
2. Open PyCharm
3. Click on Create New Project and call it ~tuto-1~
4. ~File -> New -> Python File~, name it ~repl.py~

** The REPL

Copy this code into ~repl.py~ to get us started:

#+begin_src python
import datetime

class REPL:
    def __init__(self):
        print('Press Ctrl-C Ctrl-C or Ctrl-D to quit')

        while 1:
            print(self.eval(self.read()))

    def read(self):
        return input('>> ')
    def eval(self, user_input):
        return user_input

REPL()
#+end_src

*** Executing the code
   
We'll see two ways to execute your code form PyCharm. At this point you might not get the difference between both, but you will by the end of this document ;) You'll see that the second way to run our code is actually an incredibly powerful tool for developing in python.
   
**** From the terminal
  
let's execute this code to see what it does:

1. Click on the terminal tab at the bottom right of the PyCharm window:
2. type ~python repl.py~ to run the script
3. Type something into the prompt
4. Our REPL should spit it back at user
5. Got to stop 3. if you're bored and step 6 otherwise
6. Press Ctrl-C to quit

#+CAPTION: PyCharm's console tab
[[./img/console-tab.png]]

**** From the python REPL
    
1. Right click on your code and click on ~Run 'repl'~
2. It should pup up a repl tab under your code showing our intro message followed by a prompt.

#+CAPTION: REPL first run
[[./img/repl-first-run.png]]

** Gitting our code 
  
Okay, so now that we have setup our boilerplate code for our script, let's Git it using the PyCharm integration. Make sure you have Git installed on your platform, it's an independent program from PyCharm.

1. In the top toolbar, clock on ~VCS -> Enable version control integration -> 'Git' in the dropdown -> OK~. You should see a green message saying "Create Git repository in [project path]".
2. Now, you file is added to the index to Git status (check by clicking on the terminal tab and typing in ~git status~) but we still need to commit out changes.
3. On the top right of the PyCharm window should be a box saying "Git" with a blue arrow pointing down and a green checkbox on its right. Click on the checkbox to prepare our commit
4. You should see a popup with the added code in green at the bottom of the popup and an empty commit message textbox. Enter a commit message and click on the commit button at the bottom of the popup.

You can now open your terminal (just use the one integrated to PyCharm like we've been doing) and type ~git status~ to and ~git log~ to show that our file changes have been added to our Git history!

#+CAPTION: Git repository created message
[[./img/git-repo-create-msg.png]]

#+CAPTION: Adding a file to Git in PyCharm
[[./img/add-file-to-git.png]]

#+CAPTION: ~git status~ showing file added in console
[[./img/new-file-git-add-console-check.png]]

#+CAPTION: Commit checkbox
[[./img/commit-checkbox.png]]

#+CAPTION: Commit popup for our first commit
[[./img/first-commit.png]]

#+CAPTION: Double checking our commit via the CLI with ~git status~
[[./img/first-commit-console-double-check.png]]

** Making our program interesting

Now that we have all of our boilerplate, let's make our REPL a bit more useful. Let's make it spit the current time when the user enter ~time~:

Let's modify our ~eval~ method so that it looks like that:

#+begin_src python
  def eval(self, user_input):
      help_message = 'Here are the available commands: \n help \n time \n dotproduct'
      result = 'Command not recognized. ' + help_message

      if user_input == 'time':
          # Using our datetime import
          result = datetime.date.today()
      if user_input == 'help':
          result = help_message

      return result
#+end_src

Now run our file in the repl (remember: right click on the file -> run 'repl) and try to enter ~time~, ~help~, or anything else.

#+CAPTION: REPL second run
[[./img/repl-second-run.png]]

** Gitting our new modifications

1. Right click on our script: ~-> Git -> Add~
2. Click on green checkbox at the top right of the PyCharm window
3. Enter a descriptive commit message such as "Implemented eval method with time and help commands"
4. Click on commit

You should see a green message at the bottom of the PyCharm window that showed up.

If you type ~git log~ in the terminal tab, you'll see that wee now have 2 commits !

#+CAPTION: Commit popup for our second commit
[[./img/second-commit-popup.png]]

* Making our program non trivial
  
With the help of Git, we'll be able to start making our program more complete while also being able to version it properly. We're going to implement the ~numpy.dot~ function that'll allow to use our REPL to compute the vector dot product between to vectors.

** Branching

Say that our crazy REPL program is used by thousands of users on our production system and therefore we absolutely do not want to commit on our /production branch/, which is the one we've been working off of currently ;p But we still want to be able to use git to track our development work. Thankfully, PyCharm allows us to interface through it to create a new git branch and switch to it - /checking out a branch/ in git language: ~git checkout [branch_name]~. 

1. In the top toolbar: ~VCS -> VCS Operations Popup... -> Branches -> New Branch~
2. Type ~dev~ in the textbox, acknowledge the checkbox indicating that you will be switched to this new branch when creating it
3. Click okay to create our new dev branch and checking out to it.

Now if you open the PyCharm terminal via its tab at the bottom, you can enter ~git branch~ to see that we have indeed switched to the dev branch (see the little star ?).

#+CAPTION: Git branches through the CLI
[[./img/git-branch-console.png]]

#+CAPTION: Git branches Pycharm popup
[[./img/git-branches-pycharm-popup.png]]

Now that we're on our production branch anymore, we can start messing up the code without having to worry!

** Vector dot product
  
Let's add our program the ability to do the vector dot product using a special syntax: ~dotproduct [vector_1] [vector_2]~, and we'll define our vectors to be python arrays of numbers that *cannot* contain spaces (for now and simplicity's sake, this rabbit hole is for another day), for instance ~[1,2,3,100]~.

The reason for this ( and quite frankly, very poor) design decision is that we'll be able to split our input string by spaces and then construct a string that we'll feed to python's ~eval~ function. the idea is that we get our program be behave as such:

#+begin_src bash
  >> dotproduct [1,2,3,4] [1,2,3,4]
  # call np.dot([1,2,3,4],[1,2,3,4])
  30
#+end_src

We'll need to update our eval function to split our string by spaces and update the rest of our method to reflect this change. Then we'll need to create a ~dotproduct~ method for our class and call it when needed:

#+begin_src python
import datetime
import numpy as np

class REPL:

  # ...
  
  def eval(self, user_input):
      result = 'Command not recognized. ' + self.help_message

      fn_name = user_input.split(' ')[0]

      if fn_name == 'time':
          result = datetime.date.today()
      if fn_name == 'help':
          result = self.help_message
      if fn_name == 'dotproduct':
          vect1 = user_input.split(' ')[1]
          vect2 = user_input.split(' ')[2]
          result = eval("np.dot(" + vect1 + "," + vect2 + ")")

      return result
#+end_src python

Run it in the REPL and you should get:

#+begin_src bash
Press Ctrl-C Ctrl-C to quit
>> time
2018-09-22
>> help
Here are the available commands: 
 help 
 time 
 dotproduct
>> dotproduct [1,2,3,4] [1,2,3,4]
30
>> 
#+end_src

Let's commit this really quick:

#+CAPTION: Commit popup
[[./img/dotproduct-first-commit.png]]

Let's see how this handles typos, try to run ~dotproduct [~ and you should get something like:

#+begin_src bash
Traceback (most recent call last):
  File "/home/thomas/PycharmProjects/Tuto-1/repl.py", line 31, in <module>
    REPL()
  File "/home/thomas/PycharmProjects/Tuto-1/repl.py", line 10, in __init__
    print(self.eval(self.read()))
  File "/home/thomas/PycharmProjects/Tuto-1/repl.py", line 25, in eval
    vect2 = user_input.split(' ')[2]
IndexError: list index out of range
#+end_src

And our program freezes...  This is why in practice *it's pure evil to use eval*. We did it here because  our goal isn't to make a useful program, but rather to learn about PyCharm by making a program that's kinda fun. That being said, let's make a note in our code that we need to refactor this part of the code in order to make it secure (aka, parse the user entry, construct the array from it and call ~numpy.dot~ while catching the appropriate exceptions).

#+begin_src python
vect1 = user_input.split(' ')[1]
vect2 = user_input.split(' ')[2]
# TODO refactor this
result = print(eval("np.dot(" + vect1 + "," + vect2 + ")"))
#+end_src

Now if you click on the TODO tab at the bottom of your PyCharm window, you'll see your message appear from there. Really usefull to track todos !

[[./img/pycharm-todo.png]]

***  Looking at our branche's commits

Click here on the clock icon located at the top right of your PyCharm window to pop the Git log tree.

#+CAPTION: Git log icon
[[./img/git-branch-log-icon.png]]

This lists you the commits on your branch in a tray with a visual log. Double clicking on a commit message will show you the commit's diff.

#+CAPTION: PyCharm visual branh log
[[./img/git-branch-log-tray.png]]

You can also right click on the commits to have more options. Of course, there's also a command line way to see your tree: ~git log --graph --all~.

So far, you'll notice that our tree is completely linear. Our ~master~ branch is 2 commits from the root, and our ~dev~ branch is 4 commits away. However, our branches haven't diverged yet. Merging ~master~ with ~dev~ would bring our ~master~ branch up to date with our ~dev~ branch. This is called a *fast-forward merge* in Git jargon. They, by definition, /cannot create conflicts/ and are therefore very easy to handle.

*** Switching branch
    
Let's switch back to our ~master~. In the top toolbar: ~VCS -> VCS Operations Popup -> Branches... -> Master -> Checkout~

The code should have updated before your eyes :)

Let's introduce a commit in order to diverge from our ~dev~ branch. Indeed, some of our users don't understand what to do when using our program, so we'd like to introduce them with a help message at the when they launch our program. Let's modify our class' constructor:

#+begin_src python
  def __init__(self):
      print('Press Ctrl-C Ctrl-C to quit for the terminal or Ctrl-D from the REPL.')
      print('Here are the available commands: \n help \n time \n dotproduct')
#+end_src

Let's commit our changes and see what our git tree looks like before merging our two branches.

[[./img/diverging-git-tree.png]]

*** Merging with the dev branch

1. Right click on your code and ~Git -> Repository -> Merge Changes...~
2. Check the ~dev~ checkbox
3. Click on ~Merge~

If you've encountered a conflict, congratulations - you're now introduced to the Merge Conflict popup! Just click on ~Accept Yours~ for now since we know we haven't modified any of the old code. If you're still having problems, type ~git commit -m "merging"~ in the terminal to finish the merge. 

 #+CAPTION: PyCharm merge popup location
[[./img/pycharm-merge-location.png]]

 #+CAPTION: PyCharm merge popup
[[./img/pycharm-merge-popup.png]]

 Our code on our master branch has now integrated those in the dev branch. Check out the tree on PyCharm's interface (top right clock if it's disappeared):

 #+CAPTION: PyCharm Git log after merge. Both the master and dev branches have the same commits.
[[./img/pycharm-git-log-after-merge.png]]


* Conclusion

Well here you go, this was a quick look into how to use PyCharm to create a fun little Python script, our crazy REPL that give you the current date and can do the vector dot product in the least secure way possible :D

So far we've only used Git to version our own work. This is already really great, but the true power or Git is you can merge your branched with other people's, that you can easily download other git repositories from the web (using ~git clone~), contribute to it locally, and upload your contributions back (with ~git push~).

However, I think this document does a decent job at giving an overview of the very basics of Git and how they can be benefit short term. Similarly, PyCharm has its very own Python REPL that we've started using but that is much more powerful. We it allows use to "send" our file to it and be able to investigate what variables are equal to. Better, it allows us to send *parts* of a script only. But don't worry about this for now, just know that it exists because maybe you'll need it someday!

Let me know if you have any questions about this document: /thomas.binetruy@telecom-paristech.fr/, and thanks for having spent the time to read this.

The source code for this document is available here: [[https://github.com/tbinetruy/pycharm-tuto]] . Feel free to create an issue if something doesn't work, or a pull request for those that know what it is and want to contribute.
